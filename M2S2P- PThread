#include <iostream>
#include <stdlib.h>
#include <pthread.h>
#include <thread>
#include <time.h>
#include <unistd.h>
#include <string>
using namespace std;

// defining global constants
#define NUM_THREADS 8
#define MAX 1000000
pthread_mutex_t mutx;

// defining global variables
int Ndata[MAX];
long global_sum = 0;

// making the function "sum"
void* sum(void* threadid) {
    // local variables
    long tid;
    long sum = 0;
    tid = (long)threadid;
    // printf("Bye World! It's me, thread #%ld!\n", tid);
    int range = MAX / NUM_THREADS;
    int start = tid * range;
    int end = start + range;

    for (int i = start; i < end; i++) {
        sum += Ndata[i];
    }

    // enforce sequential update
    pthread_mutex_lock(&mutx);
    global_sum += sum;

    pthread_mutex_unlock(&mutx);

    // enforce sequential update

    pthread_exit(NULL);
}

int main(int argc, char* argv[]) {
    int cores = std::thread::hardware_concurrency();
    pthread_mutex_init(&mutx, NULL);

    cout << "The number of cores on this machine = " << cores << endl;
    // srand(time(NULL));
    for (int i = 0; i < MAX; i++) {
        Ndata[i] = rand() % 20;
    }

    clock_t start_time = clock();

    pthread_t threads[NUM_THREADS];
    long tid = 0;

    for (tid = 0; tid < NUM_THREADS; tid++) {
        pthread_create(&threads[tid], NULL, sum, (void*)tid);
    }

    for (tid = 0; tid < NUM_THREADS; tid++) {
        pthread_join(threads[tid], NULL);
    }

    clock_t end_time = clock();
    double execution_time = double(end_time - start_time) / CLOCKS_PER_SEC;

    cout << "The final sum = " << global_sum << endl;
    cout << "The execution time = " << execution_time << " seconds" << endl;
}
